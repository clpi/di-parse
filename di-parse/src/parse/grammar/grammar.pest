WHITESPACE = _{ " "  | NEWLINE | "\t"}
ws = _{ WHITESPACE  }


// ---- SINGLE alphanumericsS
alpha_lower = _{ ASCII_ALPHA_LOWER }
alpha_upper = _{ ASCII_ALPHA_UPPER }
alpha = _{ (alpha_lower | alpha_upper) }
digit = _{ ASCII_DIGIT }
nonzero_digit = _{ ASCII_NONZERO_DIGIT }
alphanumeric = _{ alpha | digit }

number = { digit+ }
alpha_word = _{ alpha+ }

word_obj = { number | alpha_word | ASCII_DIGIT } // ws | punc +???

newl = _{ NEWLINE }
word_ws_term = { word_obj }
word_comma_term = { word_obj ~ comma }
word_period_term = { word_obj ~ period }
word_exclamation_term = { word_obj ~ exclamation }
word_ellipsis_term = { word_obj ~ ellipsis }
word_question_term = { word_obj ~ question_mark }
word_colon_term = { word_obj ~ colon }
word_semicolon_term = {word_obj ~ semicolon}
word_hyphen_term = {word_obj ~ hyphen}
word_terminal = {
    word_ws_term | word_comma_term | word_period_term | word_exclamation_term
    | word_ellipsis_term | word_question_term | word_colon_term
    | word_semicolon_term | word_hyphen_term
}
terminal_word = { word_obj ~ term_punc }
sentence_obj = { (word_obj | ws)+ ~ terminal_word }

period = _{ "." }
not_period = {!period ~ ANY}
comma = _{ "," }
semicolon = ${ ";" }
colon = ${ ":" }
exclamation = ${ "!" }
hyphen = ${ "-" }
question_mark = ${ "?" }
ellipsis = ${ "..." }
fslash = ${ "/" }
bslash = ${ "\\"}
squote = ${ "'"}
dquote = ${ "\""}
tilde = ${ "~" }
left_paren = ${ "(" }
right_paren = ${ ")" }
quote = ${ "'" }
double_quote = ${ "\"" }
asterisk = ${ "*" }
bar = ${"|"}

char = { (alpha | digit | punc ) }
gen_char = { alpha  | digit | punc }
punc = {
    period | comma | semicolon | colon | exclamation | question_mark
    | fslash | bslash | hyphen | ellipsis | squote | dquote | left_paren | right_paren | tilde | quote | double_quote | asterisk | bar
}
term_punc = _{
    (period | comma | semicolon | colon | exclamation
    | question_mark | ellipsis  )  ~ (ws | newl | EOI)?
}

// TERMINALS
word = ${ (pron_noun | desc_noun | adj|verb | adverb | noun | preposition  | conjunction | determinant | title_case_word | all_caps_word | alphanumeric+ ) } // @ or $?
quantified_noun = @{quantifier ~ word}
title_case_word = @{ !(". ") ~ alpha_upper ~ (alpha_lower)+ } // TODO check to make sure not start of sentence
all_caps_word = @{ !(". ") ~ alpha_upper+ } // TODO check to make sure not start of sentence
subj = ${ (pronoun_subj | title_case_word ) } // TODO make sure title case word not in set of words known, like "but", "to", "where", etc.
obj = ${ ( pronoun_obj | title_case_word ) }

// subexpr = { word }

expr_term = _{ ws+ | term_punc+ | EOI | newl+  }


subexpr = { (subj? ~ (verb | prog_verb| word)+ ~ obj?) ~ expr_term }

expr = { (word | desc_noun)+ ~ expr_term }
// expr = {
//    (q_word | adj | adverb | verb | preposition | quantified_noun | alphanumeric )*
//    ~ expr_term
//}

expr_question = { q_word? ~ subexpr+ ~ question_mark }
expr_exclamation = { subexpr+ ~ exclamation }
expr_comma_left = { subexpr+ ~  &comma }
expr_comma_right = { &comma ~ subexpr+ }
expr_period = { subexpr+ ~ &comma }
expr_semicolon_left = { subexpr+ ~ &semicolon }
expr_semicolon_right = { &semicolon ~ subexpr+ }
expr_colon_left = { subexpr+ ~ &colon }
expr_colon_right = { &colon ~ subexpr+ }
expr_hyphen_left = { subexpr+ ~ &colon }
expr_hyphen_right = { &colon ~ subexpr+ }
expr_in_parens = { &left_paren ~ subexpr+ ~ &right_paren }
expr_out_parens = { subexpr* ~ &left_paren ~ &ANY+ ~ &right_paren ~ subexpr*  }
expr_all_types = {
    ( expr_question | expr_exclamation  | expr_comma_left | expr_comma_right
    | expr_period | expr_semicolon_left | expr_semicolon_right | expr_colon_left
    | expr_colon_right | expr_hyphen_left | expr_hyphen_right | expr_in_parens
    | expr_out_parens )* ~ expr_term
}
supexpr = { expr_all_types }


full = { SOI ~ expr* ~ EOI }








gen_chars_ws = { (gen_char ~ ws)* }
gen_chars_ws_or = { ( gen_char | gen_chars_ws ) }

upper_letter = _{ UPPERCASE_LETTER }
lower_letter = _{ !upper_letter ~ alpha }
title_case = _{ ws ~ upper_letter }
not_title_case = _{ !title_case ~ word }
punc_or_ws = _{ punc | ws }

int   = @{ "-" ? ~ ("0" | '1'..'9' ~ '0'..'9' * ) }
float = @{
    "-" ? ~
    (
        "0" ~ "." ~ '0'..'9' + |
        '1'..'9' ~ '0'..'9' * ~ "." ~ '0'..'9' +
    )
}
noncharacter = _{ !char ~ ANY }

char_list = { !digit ~ char ~ (" " ~ char)+ }

// CONJUNCTION ---------------------------------------------------
_or = @{^"or"}
_and = @{^"and"}
_not = @{^"not"}
_if = @{^"if"}
_but = @{^"but"}
_however = @{^"however"}

conjunction = @{ _or | _and | _not | _if | _however | _but}

// ADJECTIVE -----------------------------------------------------

// my your his are adj
// DETERMINANT ---------------------
_a = @{"a"}
_an =  @{ "an" }
_the = @{"the"}
_that = @{"that"}
determinant = @{(_a | _the | _that | _an) ~ &(adj | verb | noun | alphanumeric+)?}

// QUANTIFIERS ---------
some = @{ "some" }
few = @{ "few" }
several = @{ "several" }
many = @{ "many" }
much = @{ "much" }
lot = @{ "lot" }
alot = @{ "alot" }
couple = @{ "couple" }
none = @{ "none" }
no_one = @{ "no one" }
amultiple = @{ (_a ~ ( few | couple | lot )) | (alot) }
adj_quantifier = _{
    some | few | several | amultiple | couple | many
    | much | lot
}
its_o = @{ "its" }
my_o = @{ "my" }
his_o = @{ "his" }
her_o = @{ "her" }
your_o = @{"your"}
their_o = @{ "their" }
our_o = @{ "our" }

adj_own = { its | my | his | your | their | our }




bool_true = @{ "true" | "True" }
bool_false = @{ "false" | "False" }
correct = @{ "correct" }
incorrect = @{ "incorrect" }
right = @{ "right" } // TODO distinguish between moral and correctness
wrong = @{ "wrong" }
bool_pos = @{ bool_true | correct | right }
bool_neg = @{ bool_false | incorrect | wrong }
bool = {bool_true | bool_false}

good = @{ "good" }
bad = @{ "bad" }
big = @{ "big" }
small = @{ "small" }
evil = @{ "evil" }
virtuous = @{ "virtuous" }
courageous = @{ "courageous" }
cowardly = @{ "cowardly" }
strong = @{ "strong" }
brave = @{ "brave" }
weak = @{ "weak" }
pathetic = @{ "pathetic" }
adj_moral_pos = { good | virtuous  | strong | brave }
adj_moral_neg = { bad | evil  | cowardly | weak | pathetic }
adj_moral = {adj_moral_pos | adj_moral_neg}

// Misc
weird = @{"weird"}
strange = @{"strange"}
odd = @{"odd"}
adj_misc = { weird | strange | odd }

// Characteristics
shy = @{"shy"}
confident = @{"confident"}
outgoing  = @{"outgoing"}
patient  = @{"patient"}
adj_character = { shy | confident  | outgoing | patient }

ugly = @{"ugly"}
pretty = @{"pretty"}
adj_appearance = { ugly | pretty }

// Moods
happy = @{ "happy" }
sad = @{ "sad" }
angry = @{ "angry"}
well = @{ "well" }
unwell = @{"unwell"}

fast = @{"fast"}
slow = @{"slow"}

adj_mood = { happy | sad | angry | well | unwell }
adj = { &determinant? ~ ws? ~
    (adj_mood | adj_appearance | adj_character | adj_misc | adj_moral |
    quantifier | adj_own | bool | fast | slow | ownership )
}

// NOUN-----------------------------------
man = @{"man"}
men = @{"men"}
n_bar = @{"bar"}
person = @{"person"}
people = @{"people"}
woman = @{"woman"}
women = @{"women"}
friend = @{"friend"}
enemy = @{"enemy"}
boy = @{"boy"}
girl = @{"girl"}
thing = @{"thing"}
anything = @{"anything"}
nothing = @{"nothing"}
exist_noun = @{ anything | nothing | thing }

noun_sing = @{ "bear" | "house" | "thing" | "car" | exist_noun | boy | man | person | woman | n_bar | friend | enemy}
noun_plur = @{ "houses" | men | women | people }
noun = ${  noun_sing | noun_plur | day | time | times_ref | pronoun | special_place}
desc_noun = @{ determinant ~ adj? ~ noun }
pron_noun = @{ pronoun ~ adj? ~ noun }

implied_noun = @{
    (quantifier | determinant)?
    ~ ws ~ (adj)? ~ alphanumeric+
}

parens = @{
    "(" ~ ")"
}
// SPELLED OUT NUMBERS TODO Find a way to do this programmatically
one = @{"one" }
two = @{"two" }
three = @{"three" }
four = @{"four" }
five = @{"five" }
six = @{"six" }
seven = @{"seven" }
eight = @{"eight" }
nine = @{"nine" }
ten = @{"ten" }
eleven = @{"eleven"}
twelve = @{"twelve"}
spelled_number = _{ one | two | three | four | five | six | seven | eight | nine | ten | eleven | twelve }
quantifier = { adj_quantifier | spelled_number }


// PROnoun --------------

pronoun = ${ (pronoun_obj | pronoun_subj ) ~ &verb?}
pronoun_subj_sing = ${ i | he | she | you | it | that | this | p_who} // noun
pronoun_subj_plur = ${ they | we | it | those } // noun
pronoun_obj_sing = ${ me | him | her | you |  it | that | this | p_whom} // noun
pronoun_obj_plur = ${ them | us | it | that | those} // noun
pronoun_subj = ${ i | he | she | they | we | you | it  | that | this | p_who } // noun
pronoun_obj = ${ me | him | her | them | us | you | it | those | that | this | p_whom } //noun
i = @{"I" }
it = @{^"it"}
this = @{^"this"}
that = @{^"that"}
those = @{^"those"}
me = @{^"me" }
he = @{^"he" }
him = @{^"him" }
she = @{^"she" }
her = @{^"her" }
they = @{^"they" }
them = @{^"them" }
we = @{^"we" }
us = @{^"us"}
you = @{^"you"}
p_who = @{^"who"}
p_whom = @{^"whom"}
// TODO also add super low prescendence WHO and WHOM


// infinitive: be, see, write, do
// present: is/am/are, sees, does,
// past: was were did
// past participle: been, done, seen
// present participle: being, seing, writing, doing

aux_verb_sing_pr = @{ is | am | has | have | can | does }
aux_verb_sing_pt = @{ was | had | could | should | would | did}
aux_verb_sing_fu = @{ will | shall  }
aux_verb_plur_pr = @{ are | have | will | can | shall | did}
aux_verb_plur_pt = @{ were | could | would | have | should | did }
aux_verb_plur_fu = @{ will | can  | shall | _do }
// aux_fu_mod = { ( will | can | shall ) ~ be}
// aux_pr_mod = { is | am | are }
// aux_pt_mod = { was | had_been | hasbeen | could }
aux_pt = ${ aux_verb_plur_pt | aux_verb_sing_pt }
aux_pr = ${ aux_verb_sing_pr | aux_verb_plur_pr }
aux_fu = ${ aux_verb_plur_fu | aux_verb_sing_fu }
aux = ${ aux_pt | aux_pr | aux_fu}
// 24 /modals

// ------- to be -> Followed by adjective
be = ${"be"}
been = _{"been"}
had_been = _{"had" ~ ws ~"been"}
is = _{ "is" }
am = _{ "am" }
are = _{ "are" }
was = _{ "was" }
were = _{ "were" }
present_participle = @{ verb ~ "ing" }

// -------to have -> Followed by object
has = _{ "has" }
had = _{ "had" }
have = _{ "have"  }
tohave = { has | had | have }

// ------- to do -> Followed by action
does = _{ "does" }
_do = _{ "do" }
did = _{ "did" }
todo = _{ _do | did | does }

// ------- to will -> followed by a verb
will = @{ "will" }
would = @{ "would" }

// ------- to maybe -> followed by a verb
may = @{ "will" }
might = @{ "would" }
must = @{ "will" }
ought = @{ "ought" }
ought_to = @{ "ought" }
_use = @{ "use" }
used = @{ "used" } //TODO handle "used to" or "needd to"
dare = @{ "dare" }
dared = @{ "dared" }
need = @{ "would" }
needed = @{ "would" }
can = @{ "can" }
could = @{ "could" }
shall = @{ "shall" }
should = @{ "should" }
happen = @{"happen"}
happened = @{"happened"}
go = @{"go"}
see = @{"see"}
come = @{"come"}
went = @{"went"}
saw = @{"saw"}
came = @{"came"}
cry = @{"ing"}
try = @{"try"}
tried = @{"tried"}
want = @{"want"}
make = @{^"make"}
made = @{^"made"}
call = @{^"call"}
tell = @{^"tell"}
told = @{^"told"}
give = @{^"give"}
gave = @{^"gave"}
_let = @{^"let"}
_used = @{^"used"}

pres_part = { aux ~ ws ~  word ~ "ing" }

hasbeen = { has ~ ws ~ been }

// RIGHT NOW, matches "be" in "bear" hmmmm
verb_inf = @{ _to ~
    (dare | _use | need | can | happen | may | go | see
    | must | shall | have | will | try | come | see | want)
}
implied_verb_pt = _{ (had | have ) ~ alphanumeric+ ~ "ed" ~ (ws | term_punc)}
implied_verb_pr = _{ (am | is | are) ~ alphanumeric+ ~ "ing" ~ (ws | term_punc)}
implied_verb_fu = _{ (shall | will) ~ alphanumeric+ ~ (ws | term_punc)}
verb_pr = @{ go | see | come | must | shall | has | have | will | give | tell | call | make | _let }
//implied_verb_pt_part = {(had | have | hasbeen  ) ~ ws ~ alphanumeric+ ~ "ed"}
verb_fu = @{ "will" }
verb_pt = @{ went | came | saw | gave | told | made | _let | _used}
verb = @{ (aux | verb_inf | "go" | "look" | "see" | verb_pt | verb_pr | verb_fu | verb_inf | implied_verb_fu | implied_verb_pr | implied_verb_pt | prog_verb) }
prog_verb = @{ verb_pr ~ "ing" }

expr_sing_pt = { pronoun ~ aux_verb_sing_pr ~ prog_verb }

// PREPOSITION ---------------------------
// Heur: <ADV?> ~ <VERB (nec)> ~ <ADV?> ~ <PREP> ~ <ADJ?> ~ <NOUN (must be)>
preposition = @{
    (_to | _at | before | after | over | _of | under | above | below
    | from | _on | like | _as | _by | _for | _in)
    ~ &(determinant | adj | noun)?
}
preposition_loc = @{
    _to | _at | over | under | above | below
}

_in = _{"in"}
_to = _{"to" }
_at = _{"at" }
_for = _{"for"}
_by = _{ "by" }
_of = _{ "of" }
_on = _{ "on" }
_with = _{ "with" }
_through = _{ "through" }
_while = _{ "while" }
_into = _{ "into" }
_througout = _{ "throughout" }
before = _{ "before" }
after = _{ "after" }
near = _{"near"}
over = _{ "over" }
under = _{ "under" }
above = _{ "above" }
below = _{"below" }
from = _{"from" }
// ------------- COMPARE WORDS
like = @{ "like" }
_as = @{ "as" }
comp_similar_to = @{ "similar" ~ ws ~ "to" }
comp = { like | _as | comp_similar_to }


// --------------QUESTION WORDS
q_why = @{^"why"}
q_where = @{^"where"}
q_how = @{^"how"}
q_who = @{^"who"}
q_what = @{^"what"}
q_when = @{^"when"}
q_word = { q_why | q_where | q_how | q_who | q_what | q_when }

// ------------- CONDITIONS
cond_if = @{"if" }
cond_when = @{"when" }
cond_while= @{"while" }
cond_for = @{"for" }
cond = {cond_if | cond_when | cond_while | cond_for }

// ------------- THEREFORE
tra_then = @{"then"}
tra_for = @{"for"}
tra_therefore = @{"therefore"}
tra_however = @{"however"}
tra_albeit = @{"albeit"}
tra_although = @{"although"}
tra_but = @{"but"}
tra_because = @{"because"}
neg_transit = _{tra_however | tra_but | tra_albeit | tra_although}
pos_transit = _{tra_then | tra_therefore }
transit = { neg_transit | pos_transit | tra_because}

// ----------- TIME (sup: noun)
now = @{ "now" }
today = @{ "today" }
yesterday = @{ "yesterday" }
tomorrow = @{ "tomorrow" }
week = @{ "week" }
pm = @{^"PM"}
am_time = @{"AM"}
morning = @{"morning"}
afternoon = @{"afternoon"}
night = @{^"night" | ^"nighttime"}
evening = @{^"evening"}
oclock = @{^"oclock" | ^"o'clock"}
dawn = @{"dawn"}
dusk = @{"dusk"}
times_ref = { now | today | yesterday | tomorrow | week | morning | afternoon
    | night | evening | dawn | dusk}
time = @{
    (
        (number{0, 2} ~ colon? ~ number{0, 2}?)
        | (spelled_number)
    )
    ~ ( am_time | pm | oclock )
}

// ----------- SEQUENTIAL (sup: adj)
next = @{ "next" }
previous = @{ ^"prev" | ^"previous" }
last = @{ "last" } // NOTE ambig. between "previous" and "final" -- for dates always means previous, for opportunities etc. likely means final
by_time = @{ "by" } // NOTE ambig. between "made from" and "next to (proxim, chron.)" and date limit.
first = @{ "first" }

sequential = @{next | previous | last | first }


// -------------
tra_because_of = @{"because" ~ ws ~ "of"}
tra_due_to = @{"due" ~ ws ~ "to"}

// word = { (ws | punc | SOI) ~ alpha+ ~ (ws | punc | EOI) }
value = { alpha* }
expr_subj = {
    pronoun_subj ~ ws
    ~ ( aux_verb_sing_pr | aux_verb_plur_pr )
    ~ ws ~ value
}
expr_subj_obj = {
    pronoun_subj ~ ws
    ~ ( aux_verb_sing_pr | aux_verb_plur_pr )
    ~ ws ~ pronoun_obj
}
expr_pt_subj = {
    pronoun_subj ~ ws
    ~ ( aux_verb_sing_pt | aux_verb_plur_pt )
    ~ ws ~ value
}
expr_pt_subj_obj = {
    pronoun_subj ~ ws
    ~ ( aux_verb_sing_pt | aux_verb_plur_pt )
    ~ ws ~ pronoun_obj
}
//-------------EXPRESSIONS
expr_pt = _{ expr_pt_subj | expr_pt_subj_obj }
expr_pr = _{expr_subj | expr_subj_obj}
general_expr = _{expr_pt | expr_pr}
comma_expr = { general_expr ~ comma }
semicolon_expr = { general_expr ~ semicolon }
colon_expr = { general_expr ~ colon }
statement = { general_expr | comma_expr | semicolon_expr | colon_expr }
// -------- SENTENCES
exclcamation = { statement+ ~ exclamation }
// sentence = { (statement | comma_expr | semicolon_expr | colon_expr )+  ~ period }
question = { q_word ~ (general_expr)+ ~ question_mark }

startsentence = { "." ~  ws ~ expr}
// -------- WHOLE FILES
file = {
    SOI ~
    (comma_expr | expr)* ~
    EOI
}

item = { ws }
record = { ws }
field = { ws }
monday = { "monday" | "mon" | "mo"}
tuesday = { "tuesday" | "tues" | "tue" }
saturday = { "saturday" | "sat" }
weekday = _{ "monday" | "tuesday" | "wednesday" | "thursday" | "friday" }
weekend = _{ "sunday" | "saturday" }
day = { weekday | weekend }

templ = { SOI ~ ANY* ~ EOI }

special_name = @{ title_case_word }

// ------------ ADVERB
there = _{ ^"there" }
here = _{ ^"here" }
then = _{ ^"then" }
too = _{ ^"too" }
_unless = @{^"unless"}
adverb = {
    (there | here | then | _unless) ~ &(adj | verb | adverb)?
}





theirs = @{ "theirs" }
ours = @{ "ours" }
hers = @{ "hers" }
ownership_mod = @{ word ~ "'s" } // TODO handle no apostrophe

// her = @{ "her" }
mine = @{"mine"}

ownership_a = @{ their | his | my | her | our | its }
ownership_n = @{ theirs | his | mine | hers | ours | its }
ownership = @{ ownership_n | ownership_a }

special_place = @{ (_to | _in | _at) ~ title_case_word }


// SENTENCE TYPES
//    SENT
//       IMPR (imperative)
//       DECL (declaration)
//       QUES (question)
//       EXCL (exclamation)
//       CMPD (compound)
//
// TOP LEVEL TOKEN TYPES
//    PUNC
//    NP
//      NOUN
//
//   ...NP* (SUBJ) ~  VERB* (HEAD) ... (NP|PUNC)+
//      (PAST,PRES)
//        (SING, PLUR)
//          (AUX, NAUX)
//




// NOTE                             |      SEGTYPE:    DECL
// TOP LEVEL:     STRING            |  "The question was answered."
//                   |              |    |     |      |     |     |
//             SENT  DECL  QUEST    |   NP     NP    VERB  NP    PUNC
//             /     |      \       |    |     |      |     |
//             \     |      /       |   ADJ   NOUN   VERB  ADJ
//                                  |    /    SUBJ   HEAD   \
//                                  |         SING   BASE:BE \
//                                  |                PAST
//                                  |                AUX
//
// DECLII----NP1-------NOUN1*----"bagels"
// 1----NP2-------PRON1*----"I"
// 1----VERB1*----"know"
// 1----VP1-------COMPLl----""
// I
// NP3-------PRON2*----"he"
// I
// VERB2*----"likes"
// 1----PUNC1-----"."
//
// EXTRACT
// SEGTYPE VP
// STR "he likes"
// BASE "like"
// POS  NOUN VERB
// INDIC SING PERS3 PRS TRAN THATCOMP INGCOMP NPING NPTOV NPTIRT
// PRMODS COMPLI  ""
// PRMODS NP3    "he"
// HEAD  VERB2 "likes"
// SUBJECT NP3  "he"
// OBJECT NPI  "bagels"
